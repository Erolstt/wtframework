'''
Created on Feb 8, 2013

@author: davidlai
'''
import unittest
from wtframework.wtf.testobjects.WatchedTestCase import WatchedTestCase

__wtf_test_logger_var = []

class TestTestCase(WatchedTestCase):
    
    def __init__(self, *args, **kwargs):
        super(TestTestCase, self).__init__(*args, **kwargs)
        self.watcher = LoggerTestWatcher()
        self.register_test_watcher(self.watcher)
    
    def setUp(self):
        self.watcher.log.append("setUp")
        return
    
    def tearDown(self):
        self.watcher.log.append("tearDown")
        return

    def test_aaa_something(self):
        "Dummy test to set things up."
        self.watcher.log.append("test_aaa")
        return
        
    def test_bbb_something(self):
        "2nd dummp test to set things up"
        self.watcher.log.append("test_bbb")
        return
    
    def test_zzz_test_our_real_event_sequence(self):
        "Check the dummy test's sequence of events."
        
        # Keep in mind we're running a test after another test.
        expected = ['before_setup', #generated by test_aaa 
                    'setUp', 
                    'before_test', 
                    'test_aaa', 
                    'on_test_pass', 
                    'after_test', 
                    'tearDown', 
                    'after_teardown', 
                    'before_setup', #generated by test_bbb 
                    'setUp', 
                    'before_test', 
                    'test_bbb', 
                    'on_test_pass', 
                    'after_test', 
                    'tearDown', 
                    'after_teardown', 
                    'before_setup', #generated by test_zzz
                    'setUp', 
                    'before_test'] 
        print self.get_log()
        self.assertEqual(expected, 
                         self.get_log())


class LoggerTestWatcher(object):
    "This test watcher just logs actions to a list to verify order of events."
    
    log = []

    def before_setup(self, test_case, test_result):
        print "LoggerTestWatcher before_setup"
        self.log.append("before_setup")
    
    def before_test(self, test_case, test_result):
        self.log.append("before_test")
    
    def after_test(self, test_case, test_result):
        self.log.append("after_test")
    
    def after_teardown(self, test_case, test_result):
        self.log.append("after_teardown")
    
    def on_test_failure(self, test_case, test_result, exception):
        self.log.append("on_test_failure")
    
    def on_test_error(self, test_case, test_result, exception):
        self.log.append("on_test_error")
    
    def on_test_pass(self, test_case, test_result):
        self.log.append("on_test_pass")
        
    def get_log(self):
        return self.log
        

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()